{"version":3,"file":"node-build.mjs","sources":["../../server/routes/demo.ts","../../server/routes/auth.ts","../../server/routes/projects.ts","../../server/index.ts","../../server/node-build.ts"],"sourcesContent":["import { RequestHandler } from \"express\";\nimport { DemoResponse } from \"@shared/api\";\n\nexport const handleDemo: RequestHandler = (req, res) => {\n  const response: DemoResponse = {\n    message: \"Hello from Express server\",\n  };\n  res.status(200).json(response);\n};\n","import { RequestHandler } from \"express\";\n\n// Mock user database (in a real app, this would be a proper database)\nconst users: Array<{\n  id: string;\n  email: string;\n  password: string;\n  firstName: string;\n  lastName: string;\n  rollNumber: string;\n  department: string;\n  semester: string;\n  profilePhoto?: string;\n  githubId?: string;\n  gmailId?: string;\n  createdAt: string;\n}> = [\n  {\n    id: \"1\",\n    email: \"gargikathait7@gmail.com\",\n    password: \"testuser@123\", // In real app, this would be hashed\n    firstName: \"Test\",\n    lastName: \"User\",\n    rollNumber: \"23ERWCS028\",\n    department: \"cse\",\n    semester: \"6\",\n    createdAt: new Date().toISOString(),\n  },\n];\n\n// Roll number validation function\nconst validateRollNumber = (rollNumber: string): boolean => {\n  // Roll number format: 23ERWCS028 (2 digits + ERW + 2-3 chars department + 3 digits)\n  const rollNumberPattern = /^\\d{2}ERW[A-Z]{2,3}\\d{3}$/;\n  return rollNumberPattern.test(rollNumber.toUpperCase());\n};\n\n// Register new user\nexport const handleRegister: RequestHandler = (req, res) => {\n  try {\n    const {\n      firstName,\n      lastName,\n      email,\n      rollNumber,\n      department,\n      semester,\n      password,\n    } = req.body;\n\n    // Validate required fields\n    if (\n      !firstName ||\n      !lastName ||\n      !email ||\n      !rollNumber ||\n      !department ||\n      !semester ||\n      !password\n    ) {\n      return res.status(400).json({\n        success: false,\n        message: \"All fields are required\",\n      });\n    }\n\n    // Validate roll number format\n    if (!validateRollNumber(rollNumber)) {\n      return res.status(400).json({\n        success: false,\n        message: \"Invalid roll number format. Must be like: 23ERWCS028\",\n      });\n    }\n\n    // Check if user already exists\n    const existingUser = users.find(\n      (user) =>\n        user.email === email || user.rollNumber === rollNumber.toUpperCase(),\n    );\n    if (existingUser) {\n      return res.status(400).json({\n        success: false,\n        message: \"User with this email or roll number already exists\",\n      });\n    }\n\n    // Create new user\n    const newUser = {\n      id: Date.now().toString(),\n      email,\n      password, // In real app, hash this password\n      firstName,\n      lastName,\n      rollNumber: rollNumber.toUpperCase(),\n      department,\n      semester,\n      createdAt: new Date().toISOString(),\n    };\n\n    users.push(newUser);\n\n    // Return success (without password)\n    const { password: _, ...userWithoutPassword } = newUser;\n    res.json({\n      success: true,\n      message: \"User registered successfully\",\n      user: userWithoutPassword,\n    });\n  } catch (error) {\n    res.status(500).json({\n      success: false,\n      message: \"Internal server error\",\n    });\n  }\n};\n\n// Login user\nexport const handleLogin: RequestHandler = (req, res) => {\n  try {\n    const { email, password } = req.body;\n\n    // Validate required fields\n    if (!email || !password) {\n      return res.status(400).json({\n        success: false,\n        message: \"Email and password are required\",\n      });\n    }\n\n    // Find user\n    const user = users.find(\n      (u) => u.email === email && u.password === password,\n    );\n    if (!user) {\n      return res.status(401).json({\n        success: false,\n        message: \"Invalid email or password\",\n      });\n    }\n\n    // Validate that user has a proper roll number\n    if (!user.rollNumber || !validateRollNumber(user.rollNumber)) {\n      return res.status(403).json({\n        success: false,\n        message: \"Access denied. Valid RCEW roll number required.\",\n      });\n    }\n\n    // Return success (without password)\n    const { password: _, ...userWithoutPassword } = user;\n    res.json({\n      success: true,\n      message: \"Login successful\",\n      user: userWithoutPassword,\n      token: \"mock-jwt-token\", // In real app, generate actual JWT\n    });\n  } catch (error) {\n    res.status(500).json({\n      success: false,\n      message: \"Internal server error\",\n    });\n  }\n};\n\n// Get user profile\nexport const handleProfile: RequestHandler = (req, res) => {\n  try {\n    // In real app, verify JWT token from Authorization header\n    const userId = \"1\"; // Mock user ID\n\n    const user = users.find((u) => u.id === userId);\n    if (!user) {\n      return res.status(404).json({\n        success: false,\n        message: \"User not found\",\n      });\n    }\n\n    const { password: _, ...userWithoutPassword } = user;\n    res.json({\n      success: true,\n      user: userWithoutPassword,\n    });\n  } catch (error) {\n    res.status(500).json({\n      success: false,\n      message: \"Internal server error\",\n    });\n  }\n};\n\n// Upload profile photo\nexport const handleUploadPhoto: RequestHandler = (req, res) => {\n  try {\n    const { photo } = req.body;\n    const userId = \"1\"; // In real app, get from JWT token\n\n    const user = users.find((u) => u.id === userId);\n    if (!user) {\n      return res.status(404).json({\n        success: false,\n        message: \"User not found\",\n      });\n    }\n\n    // Update user's profile photo\n    user.profilePhoto = photo;\n\n    const { password: _, ...userWithoutPassword } = user;\n    res.json({\n      success: true,\n      message: \"Profile photo updated successfully\",\n      user: userWithoutPassword,\n    });\n  } catch (error) {\n    res.status(500).json({\n      success: false,\n      message: \"Internal server error\",\n    });\n  }\n};\n","import { RequestHandler } from \"express\";\n\n// Mock projects database\nconst projects: Array<{\n  id: string;\n  title: string;\n  description: string;\n  author: string;\n  authorId: string;\n  department: string;\n  year: string;\n  category: string;\n  level: string;\n  tags: string[];\n  features?: string;\n  supervisor?: string;\n  collaborators?: string;\n  githubRepo?: string;\n  deployLink?: string;\n  githubId?: string;\n  gmailId?: string;\n  views: number;\n  rating: number;\n  ratings: Array<{ userId: string; rating: number }>;\n  files: Array<{ type: string; name: string; url: string }>;\n  facultyValidation: \"pending\" | \"approved\" | \"disapproved\";\n  facultyComments?: string;\n  createdAt: string;\n  updatedAt: string;\n}> = [];\n\n// Get all projects with filtering\nexport const handleGetProjects: RequestHandler = (req, res) => {\n  try {\n    const {\n      year,\n      department,\n      category,\n      search,\n      sortBy = \"recent\",\n      limit = \"20\",\n      offset = \"0\",\n    } = req.query;\n\n    let filteredProjects = [...projects];\n\n    // Apply filters\n    if (year && year !== \"all\") {\n      filteredProjects = filteredProjects.filter((p) => p.year === year);\n    }\n\n    if (department && department !== \"all\") {\n      filteredProjects = filteredProjects.filter((p) =>\n        p.department\n          .toLowerCase()\n          .includes((department as string).toLowerCase()),\n      );\n    }\n\n    if (category && category !== \"all\") {\n      filteredProjects = filteredProjects.filter(\n        (p) => p.category === category,\n      );\n    }\n\n    if (search) {\n      const searchTerm = (search as string).toLowerCase();\n      filteredProjects = filteredProjects.filter(\n        (p) =>\n          p.title.toLowerCase().includes(searchTerm) ||\n          p.description.toLowerCase().includes(searchTerm) ||\n          p.author.toLowerCase().includes(searchTerm) ||\n          p.tags.some((tag) => tag.toLowerCase().includes(searchTerm)),\n      );\n    }\n\n    // Apply sorting\n    switch (sortBy) {\n      case \"popular\":\n        filteredProjects.sort((a, b) => b.views - a.views);\n        break;\n      case \"rating\":\n        filteredProjects.sort((a, b) => b.rating - a.rating);\n        break;\n      case \"year\":\n        filteredProjects.sort((a, b) => b.year.localeCompare(a.year));\n        break;\n      case \"recent\":\n      default:\n        filteredProjects.sort(\n          (a, b) =>\n            new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime(),\n        );\n        break;\n    }\n\n    // Apply pagination\n    const limitNum = parseInt(limit as string);\n    const offsetNum = parseInt(offset as string);\n    const paginatedProjects = filteredProjects.slice(\n      offsetNum,\n      offsetNum + limitNum,\n    );\n\n    res.json({\n      success: true,\n      projects: paginatedProjects,\n      total: filteredProjects.length,\n      hasMore: offsetNum + limitNum < filteredProjects.length,\n    });\n  } catch (error) {\n    res.status(500).json({\n      success: false,\n      message: \"Internal server error\",\n    });\n  }\n};\n\n// Get single project\nexport const handleGetProject: RequestHandler = (req, res) => {\n  try {\n    const { id } = req.params;\n    const project = projects.find((p) => p.id === id);\n\n    if (!project) {\n      return res.status(404).json({\n        success: false,\n        message: \"Project not found\",\n      });\n    }\n\n    res.json({\n      success: true,\n      project,\n    });\n  } catch (error) {\n    res.status(500).json({\n      success: false,\n      message: \"Internal server error\",\n    });\n  }\n};\n\n// Create new project\nexport const handleCreateProject: RequestHandler = (req, res) => {\n  try {\n    const {\n      title,\n      description,\n      department,\n      year,\n      category,\n      level,\n      tags,\n      features,\n      supervisor,\n      collaborators,\n      githubRepo,\n      deployLink,\n      githubId,\n      gmailId,\n    } = req.body;\n\n    // In real app, get user ID from JWT token\n    const authorId = \"123\";\n    const author = \"Gargi Kathait\"; // In real app, get from user database\n\n    const newProject = {\n      id: Date.now().toString(),\n      title,\n      description,\n      author,\n      authorId,\n      department,\n      year,\n      category,\n      level,\n      tags: tags || [],\n      features,\n      supervisor,\n      collaborators,\n      githubRepo,\n      deployLink,\n      githubId,\n      gmailId,\n      views: 0,\n      rating: 0,\n      ratings: [],\n      files: [],\n      facultyValidation: \"pending\",\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString(),\n    };\n\n    projects.push(newProject);\n\n    res.json({\n      success: true,\n      message: \"Project created successfully\",\n      project: newProject,\n    });\n  } catch (error) {\n    res.status(500).json({\n      success: false,\n      message: \"Internal server error\",\n    });\n  }\n};\n\n// Update project\nexport const handleUpdateProject: RequestHandler = (req, res) => {\n  try {\n    const { id } = req.params;\n    const projectIndex = projects.findIndex((p) => p.id === id);\n\n    if (projectIndex === -1) {\n      return res.status(404).json({\n        success: false,\n        message: \"Project not found\",\n      });\n    }\n\n    // In real app, check if user owns the project\n    const updatedProject = {\n      ...projects[projectIndex],\n      ...req.body,\n      updatedAt: new Date().toISOString(),\n    };\n\n    projects[projectIndex] = updatedProject;\n\n    res.json({\n      success: true,\n      message: \"Project updated successfully\",\n      project: updatedProject,\n    });\n  } catch (error) {\n    res.status(500).json({\n      success: false,\n      message: \"Internal server error\",\n    });\n  }\n};\n\n// View project (increment view count)\nexport const handleViewProject: RequestHandler = (req, res) => {\n  try {\n    const { id } = req.params;\n    const project = projects.find((p) => p.id === id);\n\n    if (!project) {\n      return res.status(404).json({\n        success: false,\n        message: \"Project not found\",\n      });\n    }\n\n    // Increment view count\n    project.views += 1;\n\n    res.json({\n      success: true,\n      message: \"View recorded\",\n      views: project.views,\n    });\n  } catch (error) {\n    res.status(500).json({\n      success: false,\n      message: \"Internal server error\",\n    });\n  }\n};\n\n// Faculty validation\nexport const handleFacultyValidation: RequestHandler = (req, res) => {\n  try {\n    const { id } = req.params;\n    const { status, comments } = req.body;\n\n    const project = projects.find((p) => p.id === id);\n    if (!project) {\n      return res.status(404).json({\n        success: false,\n        message: \"Project not found\",\n      });\n    }\n\n    // Update faculty validation\n    project.facultyValidation = status;\n    project.facultyComments = comments;\n    project.updatedAt = new Date().toISOString();\n\n    res.json({\n      success: true,\n      message: \"Faculty validation updated successfully\",\n      project,\n    });\n  } catch (error) {\n    res.status(500).json({\n      success: false,\n      message: \"Internal server error\",\n    });\n  }\n};\n\n// Rate project\nexport const handleRateProject: RequestHandler = (req, res) => {\n  try {\n    const { id } = req.params;\n    const { rating } = req.body;\n    const userId = \"1\"; // In real app, get from JWT token\n\n    const project = projects.find((p) => p.id === id);\n    if (!project) {\n      return res.status(404).json({\n        success: false,\n        message: \"Project not found\",\n      });\n    }\n\n    // Check if user already rated\n    const existingRatingIndex = project.ratings.findIndex(\n      (r) => r.userId === userId,\n    );\n\n    if (existingRatingIndex >= 0) {\n      // Update existing rating\n      project.ratings[existingRatingIndex].rating = rating;\n    } else {\n      // Add new rating\n      project.ratings.push({ userId, rating });\n    }\n\n    // Recalculate average rating\n    const totalRating = project.ratings.reduce((sum, r) => sum + r.rating, 0);\n    project.rating =\n      Math.round((totalRating / project.ratings.length) * 10) / 10;\n\n    res.json({\n      success: true,\n      message: \"Rating submitted successfully\",\n      rating: project.rating,\n    });\n  } catch (error) {\n    res.status(500).json({\n      success: false,\n      message: \"Internal server error\",\n    });\n  }\n};\n\n// Get projects by year statistics\nexport const handleGetProjectStats: RequestHandler = (req, res) => {\n  try {\n    const stats = {\n      byYear: {} as Record<string, number>,\n      byDepartment: {} as Record<string, number>,\n      byCategory: {} as Record<string, number>,\n      total: projects.length,\n      totalViews: projects.reduce((sum, p) => sum + p.views, 0),\n    };\n\n    projects.forEach((project) => {\n      // By year\n      stats.byYear[project.year] = (stats.byYear[project.year] || 0) + 1;\n\n      // By department\n      stats.byDepartment[project.department] =\n        (stats.byDepartment[project.department] || 0) + 1;\n\n      // By category\n      stats.byCategory[project.category] =\n        (stats.byCategory[project.category] || 0) + 1;\n    });\n\n    res.json({\n      success: true,\n      stats,\n    });\n  } catch (error) {\n    res.status(500).json({\n      success: false,\n      message: \"Internal server error\",\n    });\n  }\n};\n\n// Get available years\nexport const handleGetAvailableYears: RequestHandler = (req, res) => {\n  try {\n    const years = [...new Set(projects.map((p) => p.year))].sort((a, b) =>\n      b.localeCompare(a),\n    );\n\n    res.json({\n      success: true,\n      years: years,\n    });\n  } catch (error) {\n    res.status(500).json({\n      success: false,\n      message: \"Internal server error\",\n    });\n  }\n};\n","import \"dotenv/config\";\nimport express from \"express\";\nimport cors from \"cors\";\nimport { handleDemo } from \"./routes/demo\";\nimport {\n  handleRegister,\n  handleLogin,\n  handleProfile,\n  handleUploadPhoto,\n} from \"./routes/auth\";\nimport {\n  handleGetProjects,\n  handleGetProject,\n  handleCreateProject,\n  handleUpdateProject,\n  handleViewProject,\n  handleRateProject,\n  handleFacultyValidation,\n  handleGetProjectStats,\n  handleGetAvailableYears,\n} from \"./routes/projects\";\n\nexport function createServer() {\n  const app = express();\n\n  // Middleware\n  app.use(cors());\n  app.use(express.json());\n  app.use(express.urlencoded({ extended: true }));\n\n  // Example API routes\n  app.get(\"/api/ping\", (_req, res) => {\n    const ping = process.env.PING_MESSAGE ?? \"ping\";\n    res.json({ message: ping });\n  });\n\n  app.get(\"/api/demo\", handleDemo);\n\n  // Authentication routes\n  app.post(\"/api/auth/register\", handleRegister);\n  app.post(\"/api/auth/login\", handleLogin);\n  app.get(\"/api/auth/profile\", handleProfile);\n  app.post(\"/api/auth/upload-photo\", handleUploadPhoto);\n\n  // Projects routes\n  app.get(\"/api/projects\", handleGetProjects);\n  app.get(\"/api/projects/stats\", handleGetProjectStats);\n  app.get(\"/api/projects/years\", handleGetAvailableYears);\n  app.get(\"/api/projects/:id\", handleGetProject);\n  app.post(\"/api/projects\", handleCreateProject);\n  app.put(\"/api/projects/:id\", handleUpdateProject);\n  app.post(\"/api/projects/:id/view\", handleViewProject);\n  app.post(\"/api/projects/:id/rate\", handleRateProject);\n  app.post(\"/api/projects/:id/faculty-validation\", handleFacultyValidation);\n\n  return app;\n}\n","import path from \"path\";\nimport { createServer } from \"./index\";\nimport * as express from \"express\";\n\nconst app = createServer();\nconst port = process.env.PORT || 3000;\n\n// In production, serve the built SPA files\nconst __dirname = import.meta.dirname;\nconst distPath = path.join(__dirname, \"../spa\");\n\n// Serve static files\napp.use(express.static(distPath));\n\n// Handle React Router - serve index.html for all non-API routes\napp.get(\"*\", (req, res) => {\n  // Don't serve index.html for API routes\n  if (req.path.startsWith(\"/api/\") || req.path.startsWith(\"/health\")) {\n    return res.status(404).json({ error: \"API endpoint not found\" });\n  }\n\n  res.sendFile(path.join(distPath, \"index.html\"));\n});\n\napp.listen(port, () => {\n  console.log(`🚀 Fusion Starter server running on port ${port}`);\n  console.log(`📱 Frontend: http://localhost:${port}`);\n  console.log(`🔧 API: http://localhost:${port}/api`);\n});\n\n// Graceful shutdown\nprocess.on(\"SIGTERM\", () => {\n  console.log(\"🛑 Received SIGTERM, shutting down gracefully\");\n  process.exit(0);\n});\n\nprocess.on(\"SIGINT\", () => {\n  console.log(\"🛑 Received SIGINT, shutting down gracefully\");\n  process.exit(0);\n});\n"],"names":["app","express"],"mappings":"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"}